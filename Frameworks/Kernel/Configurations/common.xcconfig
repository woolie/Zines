// Xcode settings for all Woolsoft iOS targets

// === Architectures ===
// === Assets ===
// === Build Locations ===
// === Build Options ===

DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym"
ENABLE_TESTABILITY = YES
APPLICATION_EXTENSION_API_ONLY = YES

// === Deployment ===

COMBINE_HIDPI_IMAGES = YES
SKIP_INSTALL = YES
COPY_PHASE_STRIP = NO
IPHONEOS_DEPLOYMENT_TARGET = 13.0
WATCHOS_DEPLOYMENT_TARGET = 6.0;
INSTALL_PATH = $(LOCAL_LIBRARY_DIR)/Frameworks
TARGETED_DEVICE_FAMILY = 1,2

// === Kernel Modules ===
// === Linking ===

DYLIB_COMPATIBILITY_VERSION = 1
DYLIB_CURRENT_VERSION = 1
DYLIB_INSTALL_NAME_BASE = @rpath
LD_RUNPATH_SEARCH_PATHS =   $(inherited) @executable_path/Frameworks @loader_path/Frameworks

// === Localization ===

// === Packaging ===

DEFINES_MODULE = YES

// === Search Paths ===

// "For backwards compatibility reasons, this setting is enabled by default, but disabling it is strongly recommended."

ALWAYS_SEARCH_USER_PATHS = NO

// === Signing ===

CODE_SIGN_STYLE = Automatic
DEVELOPMENT_TEAM = K4BLS76LRL

// === Testing ===
// === Text-Based API ===
// === Versioning ===

CURRENT_PROJECT_VERSION = 1
VERSION_INFO_PREFIX =
VERSIONING_SYSTEM = apple-generic

// === Apple Clang - Address Sanitizer ===
// === Apple Clang - Code Generation ===

GCC_DYNAMIC_NO_PIC = NO
GCC_NO_COMMON_BLOCKS = YES
GCC_SYMBOLS_PRIVATE_EXTERN = NO

// === Apple Clang - Custom Compiler Flags ===
// === Apple Clang - Language ===

GCC_C_LANGUAGE_STANDARD = gnu11

// === Apple Clang - Language-C++ ===

CLANG_CXX_LANGUAGE_STANDARD = gnu++14
CLANG_CXX_LIBRARY = libc++

// === Apple Clang - Language-Modules ===

CLANG_ENABLE_MODULES = YES

// === Apple Clang - Language - Objective C ===

CLANG_ENABLE_OBJC_ARC = YES

// === Mac Catalyst ===

SUPPORTS_MACCATALYST = NO

// === Apple Clang - Preprocessor ===

ENABLE_STRICT_OBJC_MSGSEND = YES

// === Apple Clang - Undefined Behavior Sanitizer ===
// === Apple Clang - Warning Policies ===

GCC_WARN_INHIBIT_ALL_WARNINGS = NO
GCC_WARN_PEDANTIC = NO
GCC_TREAT_WARNINGS_AS_ERRORS = YES

// === Apple Clang - Warnings - All Languages ===

CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES
GCC_WARN_CHECK_SWITCH_STATEMENTS = YES
GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS = YES
CLANG_WARN_DOCUMENTATION_COMMENTS = YES
CLANG_WARN_EMPTY_BODY = YES
GCC_WARN_SHADOW = YES
GCC_WARN_FOUR_CHARACTER_CONSTANTS = NO
CLANG_WARN_BOOL_CONVERSION = YES
CLANG_WARN_CONSTANT_CONVERSION = YES
GCC_WARN_64_TO_32_BIT_CONVERSION = YES
CLANG_WARN_ENUM_CONVERSION = YES
CLANG_WARN_INT_CONVERSION = YES
CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES
CLANG_WARN_INFINITE_RECURSION = YES
GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR
CLANG_WARN_STRICT_PROTOTYPES = YES
CLANG_WARN_COMMA = YES
GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE
CLANG_WARN_UNREACHABLE_CODE = YES
GCC_WARN_UNUSED_FUNCTION = YES
GCC_WARN_UNUSED_VARIABLE = YES
GCC_WARN_UNKNOWN_PRAGMAS = YES
GCC_WARN_UNUSED_LABEL = YES
GCC_WARN_UNUSED_PARAMETER = NO      // Very common to have ignored params in ObjC
GCC_WARN_UNUSED_VALUE = YES
GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED = YES
GCC_WARN_MISSING_PARENTHESES = YES
GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS = YES
GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES
GCC_WARN_ABOUT_MISSING_NEWLINE = YES
CLANG_WARN_ASSIGN_ENUM = NO         // This effectively disables using NS_OPTION()
GCC_WARN_ABOUT_POINTER_SIGNEDNESS = YES
GCC_WARN_SIGN_COMPARE = YES
CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION = YES
GCC_TREAT_INCOMPATIBLE_POINTER_TYPE_WARNINGS_AS_ERRORS = YES
GCC_TREAT_IMPLICIT_FUNCTION_DECLARATIONS_AS_ERRORS = YES
GCC_WARN_TYPECHECK_CALLS_TO_PRINTF = YES
CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE

// === Apple Clang - Warnings - C++ ===

CLANG_WARN_RANGE_LOOP_ANALYSIS = YES
CLANG_WARN_SUSPICIOUS_MOVE = YES

// === Apple Clang - Warnings - Objective C ===

CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR
CLANG_WARN__DUPLICATE_METHOD_MATCH = YES
CLANG_WARN_OBJC_IMPLICIT_ATOMIC_PROPERTIES = NO		// Not useful.
CLANG_WARN_OBJC_MISSING_PROPERTY_SYNTHESIS = NO   	// This is to support legacy projects that don't use auto-synthesis
GCC_WARN_ALLOW_INCOMPLETE_PROTOCOL = YES
GCC_WARN_MULTIPLE_DEFINITION_TYPES_FOR_SELECTOR = YES
CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES
GCC_WARN_STRICT_SELECTOR_MATCH = NO					// Not useful and too tough to use with AppKit/UIKit.
GCC_WARN_UNDECLARED_SELECTOR = YES
CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR
CLANG_ENABLE_OBJC_WEAK = YES

// === Apple Clang - Warnings - Objective C and ARC ===

CLANG_WARN_OBJC_EXPLICIT_OWNERSHIP_TYPE = YES
CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES
CLANG_WARN_OBJC_REPEATED_USE_OF_WEAK = YES
CLANG_WARN_OBJC_RECEIVER_WEAK = YES
CLANG_WARN__ARC_BRIDGE_CAST_NONARC = YES

// === Asset Catalog Compiler - Options ===

// === OSACompiler - Build Options ===
// === Static Analyzer - Analysis Policy ===
// === Static Analyzer - Generic Issues ===

CLANG_ANALYZER_DEADCODE_DEADSTORES = YES
CLANG_ANALYZER_NONNULL = YES
CLANG_ANALYZER_GCD = YES

// === Static Analyzer - Issues - Apple APIs ===
CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE

// === Static Analyzer - Issues - Objective C ===
// === Static Analyzer - Issues - Security ===

CLANG_ANALYZER_SECURITY_FLOATLOOPCOUNTER = YES
CLANG_ANALYZER_SECURITY_KEYCHAIN_API = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_UNCHECKEDRETURN = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_GETPW_GETS = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_MKSTEMP = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_STRCPY = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_VFORK = YES

// === Swift Compiler - Code Generation ===
// === Swift Compiler - Custom Flags ===
// === Swift Compiler - General ===
// === Swift Compiler - Language ===

SWIFT_VERSION = 5.1;

// === Swift Compiler - Search Paths ===
// === Swift Compiler - Warningss Policies ===

SWIFT_TREAT_WARNINGS_AS_ERRORS = YES

// === User Defined ===

MTL_FAST_MATH = YES
